#
# OpenAPI Petstore
# This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
# Version: 1.0.0
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

Describe -tag 'PSPetOnlineStore' -name 'UserApi' {
    Context 'New-User' {
        It 'Test New-User' {
            #$TestResult = New-User -User "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-UsersWithArrayInput' {
        It 'Test New-UsersWithArrayInput' {
            #$TestResult = New-UsersWithArrayInput -User "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'New-UsersWithListInput' {
        It 'Test New-UsersWithListInput' {
            #$TestResult = New-UsersWithListInput -User "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-DeleteUser' {
        It 'Test Invoke-DeleteUser' {
            #$TestResult = Invoke-DeleteUser -Username "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Get-UserByName' {
        It 'Test Get-UserByName' {
            #$TestResult = Get-UserByName -Username "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-LoginUser' {
        It 'Test Invoke-LoginUser' {
            #$TestResult = Invoke-LoginUser -Username "TEST_VALUE" -Password "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Invoke-LogoutUser' {
        It 'Test Invoke-LogoutUser' {
            #$TestResult = Invoke-LogoutUser
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

    Context 'Update-User' {
        It 'Test Update-User' {
            #$TestResult = Update-User -Username "TEST_VALUE" -User "TEST_VALUE"
            #$TestResult | Should -BeOfType TODO
            #$TestResult.property | Should -Be 0
        }
    }

}
